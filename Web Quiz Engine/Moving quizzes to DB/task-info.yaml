type: edu
custom_name: stage4
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(0),
            () -> testQuizExists(0),
            () -> testQuizNotExists(0),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizIds[0], "[0]", false),
            () -> checkQuizSuccess(quizIds[0], "[1]", false),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),

            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),
            () -> checkQuizSuccess(quizIds[1], "[2]", false),
            () -> checkQuizSuccess(quizIds[1], "[3]", false),

            () -> testAllQuizzes(2),
            this::reloadServer,
            () -> testAllQuizzes(2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),
            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),

            () -> addIncorrectQuiz(error400noTitle),
            () -> addIncorrectQuiz(error400emptyTitle),
            () -> addIncorrectQuiz(error400noText),
            () -> addIncorrectQuiz(error400emptyText),
            () -> addIncorrectQuiz(error400noOptions),
            () -> addIncorrectQuiz(error400emptyOptions),
            () -> addIncorrectQuiz(error400oneOption),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),
            () -> checkQuizSuccess(quizIds[2], "[]", false),
            () -> checkQuizSuccess(quizIds[2], "[0]", false),
            () -> checkQuizSuccess(quizIds[2], "[1]", false),
            () -> checkQuizSuccess(quizIds[2], "[2]", false),
            () -> checkQuizSuccess(quizIds[2], "[3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false),

            () -> testCreateQuiz(3),
            () -> testQuizExists(3),
            () -> testQuizNotExists(3),
            () -> checkQuizSuccess(quizIds[3], "[]", false),
            () -> checkQuizSuccess(quizIds[3], "[0]", false),
            () -> checkQuizSuccess(quizIds[3], "[1]", false),
            () -> checkQuizSuccess(quizIds[3], "[2]", false),
            () -> checkQuizSuccess(quizIds[3], "[3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false),

            () -> testCreateQuiz(4),
            () -> testQuizExists(4),
            () -> testQuizNotExists(4),
            () -> checkQuizSuccess(quizIds[4], "[]", true),
            () -> checkQuizSuccess(quizIds[4], "[0]", false),
            () -> checkQuizSuccess(quizIds[4], "[1]", false),
            () -> checkQuizSuccess(quizIds[4], "[2]", false),
            () -> checkQuizSuccess(quizIds[4], "[3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false),

            () -> testCreateQuiz(5),
            () -> testQuizExists(5),
            () -> testQuizNotExists(5),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[5], "[1]", false),
            () -> checkQuizSuccess(quizIds[5], "[2]", false),
            () -> checkQuizSuccess(quizIds[5], "[3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false),

            () -> testCreateQuiz(6),
            () -> testQuizExists(6),
            () -> testQuizNotExists(6),
            () -> checkQuizSuccess(quizIds[6], "[]", false),
            () -> checkQuizSuccess(quizIds[6], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[1]", false),
            () -> checkQuizSuccess(quizIds[6], "[2]", false),
            () -> checkQuizSuccess(quizIds[6], "[3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false),

            () -> testAllQuizzes(7),
            this::reloadServer,
            () -> testAllQuizzes(7),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + 125);
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quiz).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/AnswerFeedback.java
  visible: true
  text: |
    package engine;

    public class AnswerFeedback {
        private boolean success;
        private String feedback;

        public AnswerFeedback(boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public String getFeedback() {
            return feedback;
        }

        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }
    }
  learner_created: true
- name: src/engine/Answer.java
  visible: true
  text: |
    package engine;

    import java.util.List;

    public class Answer {
        private List<Integer> answer;

        public Answer() {
        }

        public Answer(List<Integer> answer) {
            this.answer = answer;
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        @Override
        public String toString() {
            return "Answer{" +
                    "answer=" + answer +
                    '}';
        }
    }
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.validation.annotation.Validated;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.Set;

    public class Quiz {
        private int id;
        @NotBlank(message = "title is mandatory")
        private String title;
        @NotBlank(message = "text is mandatory")
        private String text;
        @NotNull(message = "options may not be null")
        @Size(min = 2)
        private String[] options;
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private Set<Integer> answer = Collections.emptySet();

        public Quiz() {
        }

        public Quiz(int id, String title, String text, String[] options, Set<Integer> answer) {
            this.id = id;
            this.title = title;
            this.text = text;
            this.options = options;
            if (answer != null) {
                this.answer = answer;
            } else {
                this.answer = Collections.emptySet();
            }
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public String[] getOptions() {
            return options;
        }

        public void setOptions(String[] options) {
            this.options = options;
        }

        public Set<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(Set<Integer> answer) {
            this.answer = answer;
        }

        @Override
        public String toString() {
            return "Quiz{" + System.lineSeparator() +
                    "\tid=" + id + System.lineSeparator() +
                    "\ttitle='" + title + '\'' + System.lineSeparator() +
                    "\ttext='" + text + '\'' + System.lineSeparator() +
                    "\toptions=" + Arrays.toString(options) + System.lineSeparator() +
                    "\tanswer=" + answer + System.lineSeparator() +
                    '}';
        }
    }
  learner_created: true
- name: src/engine/TaskController.java
  visible: true
  text: |
    package engine;

    import org.springframework.http.HttpStatus;
    import org.springframework.jmx.export.naming.IdentityNamingStrategy;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.*;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    @RestController
    public class TaskController {
        Map<Integer, Quiz> quizMap = new HashMap<>();

        public TaskController() {
    //        quizMap.put(1,
    //                new Quiz(1,
    //                        "The Java Logo",
    //                        "What is depicted on the Java logo?",
    //                        new String[]{"Robot", "Tea leaf", "Cup of coffee", "Bug"},
    //                        2));
    //        quizMap.put(2,
    //                new Quiz(2,
    //                        "The Zopa Logo",
    //                        "What is depicted on the Java logo?",
    //                        new String[]{"Robot", "Ass", "Cup of coffee", "Bug"},
    //                        1));
        }

        @PostMapping(path = "/api/quizzes")
        @ResponseStatus(HttpStatus.OK)
        public Quiz addQuiz(@Valid @RequestBody Quiz quiz) {
            System.out.println("New quiz to add:" + quiz);
            quiz.setId(quizMap.size());
            quizMap.put(quiz.getId(), quiz);
            System.out.println("New quiz added:" + quiz);
            return quiz;
    //        HttpHeaders headers = new HttpHeaders();
    //        headers.setContentType(MediaType.APPLICATION_JSON);
    //        return new ResponseEntity<>(quiz, headers, HttpStatus.OK);
    //        return quiz;
        }

        @PostMapping(path = "/api/quizzes/{id}/solve")
        public AnswerFeedback getAnswer(@PathVariable int id, @RequestBody Answer answer) {
            Quiz quiz = quizMap.get(id);
            System.out.println(quiz);
            System.out.println("answer = " + answer);
            Set<Integer> gotAnswer = new HashSet(answer.getAnswer());
            Set<Integer> correctAnswer = quizMap.get(id).getAnswer();
            System.out.println("gotAnswer = " + gotAnswer);
            System.out.println("correctAnswer = " + correctAnswer);
            if (gotAnswer.equals(correctAnswer)) {
                return new AnswerFeedback(true, "Congratulations, you're right!");
            }
            return new AnswerFeedback(false, "Wrong answer! Please, try again.");
        }

        @GetMapping(path = "/api/quizzes")
        public Collection<Quiz> getQuizzes(){
            return quizMap.values();
        }

        @GetMapping(path = "/api/quizzes/{id}")
        public Quiz getQuiz(@PathVariable int id){
            System.out.println("get quiz with id: " + id);
            if (!quizMap.containsKey(id)) {
                System.out.println(id + " not found");
                throw new ResponseStatusException(
                        HttpStatus.NOT_FOUND, "entity not found"
                );
            }
            return quizMap.get(id);
        }
    }
  learner_created: true
- name: src/engine/QuizEntity.java
  visible: true
  learner_created: true
- name: src/engine/QuizOption.java
  visible: true
  learner_created: true
- name: src/engine/QuizAnswer.java
  visible: true
  learner_created: true
- name: src/engine/QuizService.java
  visible: true
  learner_created: true
- name: src/engine/QuizServiceImpl.java
  visible: true
  learner_created: true
- name: src/engine/QuizRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/507/implement
status: Failed
feedback:
  message: "Wrong answer in test #2\n\nPOST /api/quizzes should respond with status\
    \ code 200, responded: 500\n\nResponse body:\n\n{&quot;timestamp&quot;:&quot;2020-11-16T07:51:55.316+0000&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal\
    \ Server Error&quot;,&quot;message&quot;:&quot;org.hibernate.TransientObjectException:\
    \ object references an unsaved transient instance - save the transient instance\
    \ before flushing: engine.QuizAnswer; nested exception is java.lang.IllegalStateException:\
    \ org.hibernate.TransientObjectException: object references an unsaved transient\
    \ instance - save the transient instance before flushing: engine.QuizAnswer&quot;,&quot;path&quot;:&quot;/api/quizzes&quot;}\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \nNew quiz to add:QuizEntity{id=null, title=&#39;The Java Logo&#39;, text=&#39;What\
    \ is depicted on the Java logo?&#39;, options=[QuizOption{id=null, option=&#39;Robot&#39;},\
    \ QuizOption{id=null, option=&#39;Tea leaf&#39;}, QuizOption{id=null, option=&#39;Cup\
    \ of coffee&#39;}, QuizOption{id=null, option=&#39;Bug&#39;}], answer=[QuizAnswer{id=null,\
    \ answer=2}]}\nHibernate: insert into quiz (id, text, title) values (null, ?,\
    \ ?)\nHibernate: update quiz_answer set quiz_id=? where answer_id=?\n2020-11-16\
    \ 16:51:55.252  INFO 9852 --- [nio-8889-exec-3] o.h.e.j.b.internal.AbstractBatchImpl\
    \     : HHH000010: On release of batch it still contained JDBC statements\n2020-11-16\
    \ 16:51:55.267 ERROR 9852 --- [nio-8889-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]\
    \    : Servlet.service() for servlet [dispatcherServlet] in context with path\
    \ [] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException:\
    \ org.hibernate.TransientObjectException: object references an unsaved transient\
    \ instance - save the transient instance before flushing: engine.QuizAnswer; nested\
    \ exception is java.lang.IllegalStateException: org.hibernate.TransientObjectException:\
    \ object references an unsaved transient instance - save the transient instance\
    \ before flushing: engine.QuizAnswer] with root cause\n\norg.hibernate.TransientObjectException:\
    \ object references an unsaved transient instance - save the transient instance\
    \ before flushing: engine.QuizAnswer\n\tat org.hibernate.engine.internal.ForeignKeys.getEntityIdentifierIfNotUnsaved(ForeignKeys.java:347)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.type.EntityType.getIdentifier(EntityType.java:495)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.type.EntityType.nullSafeSet(EntityType.java:280)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.persister.collection.AbstractCollectionPersister.writeElement(AbstractCollectionPersister.java:927)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1349)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.persister.collection.OneToManyPersister.recreate(OneToManyPersister.java:186)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.action.internal.CollectionRecreateAction.execute(CollectionRecreateAction.java:52)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\
    \ ~[na:na]\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:348)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:108)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1344)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:435)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3221)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2389)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:447)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\
    \ ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:534)\
    \ ~[spring-orm-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:744)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:712)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:631)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\
    \ ~[spring-tx-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178)\
    \ ~[spring-data-jpa-2.2.3.RELEASE.jar:2.2.3.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\
    \ ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat com.sun.proxy.$Proxy117.save(Unknown\
    \ Source) ~[na:na]\n\tat engine.QuizServiceImpl.saveQuiz(QuizServiceImpl.java:21)\
    \ ~[main/:na]\n\tat engine.TaskController.addQuiz(TaskController.java:44) ~[main/:na]\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\
    \ ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:170)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:225)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\
    \ ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)\
    \ ~[spring-boot-actuator-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\
    \ ~[na:na]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\
    \ ~[na:na]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\
    \ ~[tomcat-embed-core-9.0.29.jar:9.0.29]\n\tat java.base/java.lang.Thread.run(Thread.java:834)\
    \ ~[na:na]"
  time: Mon, 16 Nov 2020 07:51:55 UTC
record: -1
